{
  "_args": [
    [
      {
        "raw": "delay@2.0.0",
        "scope": null,
        "escapedName": "delay",
        "name": "delay",
        "rawSpec": "2.0.0",
        "spec": "2.0.0",
        "type": "version"
      },
      "/home/vlp/tools/maison"
    ]
  ],
  "_from": "delay@2.0.0",
  "_id": "delay@2.0.0",
  "_inCache": true,
  "_location": "/delay",
  "_nodeVersion": "4.7.3",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/delay-2.0.0.tgz_1490191009624_0.6713550852146"
  },
  "_npmUser": {
    "name": "sindresorhus",
    "email": "sindresorhus@gmail.com"
  },
  "_npmVersion": "2.15.11",
  "_phantomChildren": {},
  "_requested": {
    "raw": "delay@2.0.0",
    "scope": null,
    "escapedName": "delay",
    "name": "delay",
    "rawSpec": "2.0.0",
    "spec": "2.0.0",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/delay/-/delay-2.0.0.tgz",
  "_shasum": "9112eadc03e4ec7e00297337896f273bbd91fae5",
  "_shrinkwrap": null,
  "_spec": "delay@2.0.0",
  "_where": "/home/vlp/tools/maison",
  "author": {
    "name": "Sindre Sorhus",
    "email": "sindresorhus@gmail.com",
    "url": "sindresorhus.com"
  },
  "bugs": {
    "url": "https://github.com/sindresorhus/delay/issues"
  },
  "dependencies": {
    "p-defer": "^1.0.0"
  },
  "description": "Delay a promise a specified amount of time",
  "devDependencies": {
    "ava": "*",
    "bluebird": "^3.3.5",
    "in-range": "^1.0.0",
    "loud-rejection": "^1.3.0",
    "time-span": "^1.0.0",
    "xo": "^0.16.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9112eadc03e4ec7e00297337896f273bbd91fae5",
    "tarball": "https://registry.npmjs.org/delay/-/delay-2.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "1517859e3a2cd4ee2b16c57ff22b1c94591ec192",
  "homepage": "https://github.com/sindresorhus/delay#readme",
  "keywords": [
    "promise",
    "resolve",
    "delay",
    "defer",
    "wait",
    "stall",
    "timeout",
    "settimeout",
    "event",
    "loop",
    "next",
    "tick",
    "delay",
    "async",
    "await",
    "promises",
    "bluebird"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "jamestalmage",
      "email": "james@talmage.io"
    },
    {
      "name": "sindresorhus",
      "email": "sindresorhus@gmail.com"
    }
  ],
  "name": "delay",
  "optionalDependencies": {},
  "readme": "# delay [![Build Status](https://travis-ci.org/sindresorhus/delay.svg?branch=master)](https://travis-ci.org/sindresorhus/delay)\n\n> Delay a promise a specified amount of time\n\n\n## Install\n\n```\n$ npm install --save delay\n```\n\n\n## Usage\n\n```js\nconst delay = require('delay');\n\ndelay(200)\n\t.then(() => {\n\t\t// Executed after 200 milliseconds\n\t});\n\nsomePromise()\n\t.then(delay(100))\n\t.then(result => {\n\t\t// Executed 100 milliseconds after somePromise resolves\n\t\t// The result from somePromise is passed through\n\t});\n```\n\n\n## Advanced usage\n\n```js\nconst delay = require('delay');\n\n// With Node.js >=7.6 and async functions\nasync () => {\n\tbar();\n\n\tawait delay(100);\n\n\t// Executed 100 milliseconds later\n\tbaz();\n}();\n\n// There's also `delay.reject()` that takes the value, and rejects it `ms` later\nPromise.resolve('foo')\n\t.then(delay.reject(100))\n\t.then(x => blah()) // Never executed\n\t.catch(err => {\n\t\t// Executed 100 milliseconds later\n\t\t// err === 'foo'\n\t});\n\n// You can also specify the rejection value\nPromise.resolve('foo')\n\t.then(delay.reject(100, 'bar'))\n\t.then(x => blah()) // Never executed\n\t.catch(err => {\n\t\t// executed 100 milliseconds later\n\t\t// err === 'bar'\n\t});\n\n// You can cancel the promise by calling `.cancel()`\nasync () => {\n\tconst delaying = delay(1000);\n\tsetTimeout(() => {\n\t\tdelaying.cancel();\n\t}, 500);\n\ttry {\n\t\tawait delaying;\n\t} catch (err) {\n\t\t// `err` is an instance of `delay.CancelError`\n\t}\n}();\n```\n\n\n## API\n\n### delay(ms, [value])\n\nDelay the promise and then resolve.\n\n### delay.reject(ms, [value])\n\nDelay the promise and then reject.\n\n#### ms\n\nType: `number`\n\nMilliseconds to delay the promise.\n\n#### value\n\nType: `any`\n\nValue to pass down the promise chain. Overrides any existing value.\n\n### delay.CancelError\n\nExposed for instance checking.\n\n### delay#cancel()\n\nCancel the delay. Results in the promise being rejected with a `delay.CancelError` error.\n\n\n## Related\n\n- [p-min-delay](https://github.com/sindresorhus/p-min-delay) - Delay a promise a minimum amount of time\n- [p-immediate](https://github.com/sindresorhus/p-immediate) - Returns a promise resolved in the next event loop - think `setImmediate()`\n- [p-timeout](https://github.com/sindresorhus/p-timeout) - Timeout a promise after a specified amount of time\n- [More…](https://github.com/sindresorhus/promise-fun)\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n",
  "readmeFilename": "readme.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/sindresorhus/delay.git"
  },
  "scripts": {
    "test": "xo && ava"
  },
  "version": "2.0.0"
}
